---
import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';
import { breakpoint } from '../../tailwind/resolve';
import Link from '../navigate/Link.astro';
import Dropdown from './Dropdown.astro';
import type { NavItem } from '../navigate';

type Props = Omit<HTMLAttributes<'div'>, 'class'> & {
  class?: ClassName;
  custom?: Record<string, ClassName>;
  items: NavItem[];
};

const { class: className, custom = {}, items, ...props } = Astro.props;
---

<div
  is='app-navbar-menu'
  id='app-navbar-menu'
  role='menu'
  class={twMerge(
    'not-prose',
    '-bp:overflow-hidden',
    'absolute left-0 top-full z-0',
    'bp:static',
    // 'grid grid-cols-1 bp:auto-cols-max bp:grid-flow-col bp:gap-x-3 2xl:gap-x-5',
    'flex flex-col',
    'bp:flex-row bp:flex-nowrap',
    // 'bp:gap-x-2 2xl:gap-x-4',
    'ml-1 mt-1 max-w-xs sm:max-w-md',
    'bp:m-0 bp:h-full bp:max-w-none',
    'aria-hidden:scale-75 aria-hidden:opacity-0 aria-hidden:disabled',
    'origin-top-left',
    'bp:origin-center',
    'ready:transition ready:duration-200',
    custom.menu,
    className
  )}
  aria-owns='app-navbar-toggle'
  {...props}>
  {
    items.map((item) => {
      const { class: className, ...link } = item;
      return item.items ? (
        <Dropdown
          {custom}
          {item}
        />
      ) : (
        <div
          role='menuitem'
          class='align-middle'>
          <Link
            class={['flex items-center', custom.item, custom.link, className]}
            {...link}
            itemprop={link.href ? 'relatedLink' : undefined}
          />
        </div>
      );
    })
  }
  <slot />
</div>

<script define:vars={{ breakpoint }} is:inline>
  const node = document.getElementById('app-navbar-menu');
  /* @ts-ignore */
  if (node && !window.matchMedia(`(min-width: ${breakpoint})`).matches) {
    node.setAttribute('aria-hidden', 'true');
    node.querySelectorAll('a').forEach((el) => el.setAttribute('tabindex', '-1'));
  }
</script>

<script>
  import { breakpoint } from '../../tailwind/resolve';
  import { status } from '../../app/stores';

  class AppNavbarMenu extends HTMLDivElement {
    media = window.matchMedia(`(min-width: ${breakpoint})`);

    constructor() {
      super();

      this.style.transitionDuration = '0ms';
      this.hidden = this.check();
      status.listen((val, key) => {
        if (key === 'navbar.hidden') {
          this.hidden = !!val.navbar.hidden;
        }
      });
    }

    connectedCallback() {
      // document.addEventListener('astro:page-load', this.reset, { once: true });
      document.addEventListener('click', this.handleOutside);
      this.media.addEventListener('change', this.check);
    }

    disconnectedCallback() {
      document.removeEventListener('click', this.handleOutside);
    }

    actives = this.querySelectorAll('a, button, [role="button"]');

    get hidden() {
      return this.getAttribute('aria-hidden') === 'true';
    }

    set hidden(val) {
      if (val) {
        this.setAttribute('aria-hidden', 'true');
        this.actives.forEach((el) => el.setAttribute('tabindex', '-1'));
      } else {
        this.removeAttribute('aria-hidden');
        this.actives.forEach((el) => el.removeAttribute('tabindex'));
      }
    }

    check = () => {
      this.style.transitionDuration = '0ms';
      const hidden = !this.media.matches;
      status.setKey('navbar.hidden', hidden);
      setTimeout(() => (this.style.transitionDuration = '300ms'), 150);
      return hidden;
    };

    reset = () => {
      this.check();
      // setTimeout(() => (this.style.transitionDuration = '300ms'), 150);
    };

    get owner() {
      const id = this.getAttribute('aria-owns');
      return id ? document.getElementById(id) : null;
    }

    handleOutside = (ev: Event) => {
      if (
        ev?.target &&
        // !ev.defaultPrevented &&
        !this.contains(ev.target as Node) &&
        !this.owner?.contains(ev.target as Node)
      )
        this.check();
    };
  }

  customElements.define('app-navbar-menu', AppNavbarMenu, { extends: 'div' });
</script>
