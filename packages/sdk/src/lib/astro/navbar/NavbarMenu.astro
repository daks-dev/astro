---
import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';
import Link from '../nav/Link.astro';

type Props = Omit<HTMLAttributes<'nav'>, 'class'> & {
  class?: ClassName;
  custom?: Record<string, ClassName>;
  links: Record<string, string>;
};
const { class: className, custom, links = {}, ...props } = Astro.props;
---

<nav
  is='app-navbar-menu'
  id='app-navbar-menu'
  class={twMerge(
    'absolute left-0 top-full z-0 lg:static',
    // 'grid grid-cols-1 lg:auto-cols-max lg:grid-flow-col lg:gap-x-3 2xl:gap-x-5',
    'flex flex-col lg:flex-row lg:flex-nowrap lg:gap-x-3 2xl:gap-x-5',
    'ml-1 mt-1 max-w-xs sm:max-w-md lg:m-0 lg:max-w-none lg:h-full',
    'aria-hidden:disabled aria-hidden:scale-75 aria-hidden:opacity-0',
    'origin-top-left transition lg:origin-center',
    '-lg:overflow-hidden',
    className,
    custom?.menu
  )}
  style='transition-duration: 0ms;'
  aria-owns='app-navbar-toggle'
  {...props}>
  {
    Object.entries(links).map(([href, label]) => (
      <Link
        rel='prefetch'
        class={twMerge('page:disabled flex items-center leading-none', custom?.link)}
        {href}>
        {label}
      </Link>
    ))
  }
  <slot />
</nav>

<script is:inline>
  const node = document.getElementById('app-navbar-menu');
  if (node && window.innerWidth < 1024) {
    node.setAttribute('aria-hidden', 'true');
    node.querySelectorAll('a').forEach((el) => el.setAttribute('tabindex', '-1'));
  }
</script>

<script>
  import { status } from '../../app/stores';

  class AppNavbarMenu extends HTMLElement {
    constructor() {
      super();

      status.listen((val, key) => {
        if (key === 'navbar.hidden') {
          this.hidden = !!val.navbar.hidden;
        }
      });
    }

    connectedCallback() {
      window.addEventListener('resize', this.reset);
      document.addEventListener('astro:page-load', this.reset);
      // document.addEventListener('astro:after-swap', this.reset);
      document.addEventListener('click', this.outside);
    }

    disconnectedCallback() {
      window.removeEventListener('resize', this.reset);
      document.removeEventListener('astro:page-load', this.reset);
      // document.removeEventListener('astro:after-swap', this.reset);
      document.removeEventListener('click', this.outside);
    }

    links = this.querySelectorAll('a');

    get hidden() {
      return this.getAttribute('aria-hidden') === 'true';
    }

    set hidden(val) {
      if (val) {
        this.setAttribute('aria-hidden', 'true');
        this.links.forEach((el) => el.setAttribute('tabindex', '-1'));
      } else {
        this.removeAttribute('aria-hidden');
        this.links.forEach((el) => el.removeAttribute('tabindex'));
      }
    }

    check = () => {
      status.setKey('navbar.hidden', window.innerWidth < 1024);
    };

    reset = () => {
      this.style.transitionDuration = '0ms';
      this.check();
      setTimeout(() => (this.style.transitionDuration = '300ms'), 100);
    };

    get owner() {
      const id = this.getAttribute('aria-owns');
      return id ? document.getElementById(id) : null;
    }

    outside = (ev: Event) => {
      if (
        ev?.target &&
        // !ev.defaultPrevented &&
        !this.contains(ev.target as Node) &&
        !this.owner?.contains(ev.target as Node)
      )
        this.check();
    };
  }

  customElements.define('app-navbar-menu', AppNavbarMenu, { extends: 'nav' });
</script>
