---
import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';
import Icon from '../icon/Icon.astro';
import type { IconKeysExt } from '../../app/icons';

type Props = Omit<HTMLAttributes<'button'>, 'class'> & {
  class?: ClassName;
  icon?:
    | IconKeysExt
    | {
        open: IconKeysExt;
        close: IconKeysExt;
      };
  label?: string;
};
const {
  class: className,
  icon = {
    open: 'list',
    close: 'x'
  },
  label = 'menu toggle',
  ...props
} = Astro.props;
---

<button
  is='app-navbar-toggle'
  id='app-navbar-toggle'
  class={twMerge('group flex h-7 items-center', className)}
  aria-label={label}
  aria-expanded='false'
  aria-controls='app-navbar-menu'
  {...props}>
  <slot>
    {
      typeof icon === 'string' ? (
        <Icon
          {icon}
          class='h-full w-auto disabled'
        />
      ) : (
        <>
          <Icon
            icon={icon.open}
            class={['h-full w-auto disabled', 'group-aria-expanded:hidden']}
          />
          <Icon
            icon={icon.close}
            class={['h-full w-auto disabled', 'hidden group-aria-expanded:block']}
          />
        </>
      )
    }
  </slot>
</button>

<script>
  import { status } from '../../app/stores';

  class AppNavbarToggle extends HTMLButtonElement {
    constructor() {
      super();

      status.listen((val, key) => {
        if (key === 'navbar.hidden') {
          this.setAttribute('aria-expanded', `${!val.navbar.hidden}`);
        }
      });
    }

    connectedCallback() {
      this.addEventListener('click', this.handle);
    }

    // disconnectedCallback() { this.removeEventListener('click', this.handle); }

    handle = (ev: Event) => {
      ev.preventDefault();
      // ev.stopPropagation();
      status.setKey('navbar.hidden', !status.get().navbar.hidden);
    };
  }

  customElements.define('app-navbar-toggle', AppNavbarToggle, { extends: 'button' });
</script>
