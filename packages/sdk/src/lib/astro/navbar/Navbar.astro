---
import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';
import ColorTheme from '../color-theme/ColorTheme.astro';
import NavbarHome from '../nav/NavHome.astro';
import NavbarMenu from './NavbarMenu.astro';
import NavbarToggle from './NavbarToggle.astro';
import NavToTop from '../nav/NavToTop.astro';

type Props = Omit<HTMLAttributes<'div'>, 'class'> & {
  class?: ClassName;
  custom?: Record<string, ClassName>;
  links: Record<string, string>;
};
const { class: className, custom, links, ...props } = Astro.props;
---

<div
  is='app-navbar'
  class={twMerge(
    'fixed left-0 top-0 z-10 w-full',
    'text-lg',
    'origin-center transition-colors duration-0 ease-in-out',
    className
  )}
  {...props}>
  <div class:list={['wrapper h-full', 'flex items-center justify-end']}>
    <slot name='before'>
      <NavbarHome class={[custom?.icon, 'mr-auto', custom?.home]} />
    </slot>

    <NavbarMenu
      {custom}
      {links}>
      <slot />
    </NavbarMenu>

    <slot name='after'>
      <ColorTheme class={[custom?.icon, 'ml-auto', custom?.theme]} />
      <NavToTop class={[custom?.icon, custom?.totop]} />
    </slot>
    <NavbarToggle class={[custom?.icon, 'order-last ml-8 lg:hidden', custom?.toggle]} />
  </div>
</div>

<script>
  class AppNavbar extends HTMLDivElement {
    constructor() {
      super();
    }

    connectedCallback() {
      document.addEventListener('astro:page-load', this.transition);
      document.addEventListener('astro:after-swap', this.transition);
    }

    disconnectedCallback() {
      document.removeEventListener('astro:page-load', this.transition, true);
      document.removeEventListener('astro:after-swap', this.transition, true);
    }

    transition = () => {
      this.style.transitionDuration = '';
      setTimeout(() => (this.style.transitionDuration = '150ms'), 300);
    };
  }

  customElements.define('app-navbar', AppNavbar, { extends: 'div' });
</script>
