---
import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';
import Icon from '../icon/Icon.astro';
import type { IconKeysExt } from '../../app/icons';

type Props = Omit<HTMLAttributes<'button'>, 'class'> & {
  class?: ClassName;
  icon?: IconKeysExt;
  label?: string;
  duration?: number;
  speed?: number;
};

const {
  class: className,
  icon = 'arrow-fat-lines-up-duotone',
  label = 'to top',
  duration = 300,
  speed: s,
  ...props
} = Astro.props;

const speed = s ?? duration * 5;
---

<button
  is='app-navbar-to-top'
  class={twMerge(
    'absolute top-full z-10 flex w-10',
    'origin-center opacity-50 oversee:opacity-100',
    'scale-0 disabled',
    'onscroll:scale-100 onscroll:enabled',
    'transition-transform delay-150',
    className
  )}
  style={`transition-duration: ${duration}ms`}
  aria-label={label}
  data-speed={speed}
  {...props}>
  <slot>
    <Icon
      {icon}
      class='h-auto w-full disabled'
    />
  </slot>
</button>

<script>
  import { toTop } from '../../utils/scroll';

  class AppNavbarToTop extends HTMLButtonElement {
    timeout?: ReturnType<typeof setTimeout>;

    constructor() {
      super();
    }

    get speed() {
      return this.dataset.speed ? parseInt(this.dataset.speed) : 1000;
    }

    connectedCallback() {
      this.addEventListener('click', this.handle);
    }

    // disconnectedCallback() { this.removeEventListener('click', this.handle); }

    handle = (ev: Event) => {
      ev.preventDefault();
      ev.stopPropagation();
      toTop({ duration: this.speed });
    };
  }

  customElements.define('app-navbar-to-top', AppNavbarToTop, { extends: 'button' });
</script>
