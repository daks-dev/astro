---
// import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';
import Icon from '../icon/Icon.astro';
import type { NavItem as Props } from '.';

/*
type Props = Omit<HTMLAttributes<'a'>, 'class'> & {
  class?: ClassName;
  label?: string;
};
*/

const { class: className, href, label, icon, ...props } = Astro.props;
props.disallow = props.items = undefined;

const current =
  Astro.url.pathname === href || Astro.url.pathname === `${href}/`
    ? 'page'
    : Astro.url.pathname.startsWith(`${href}/`)
    ? 'step'
    : undefined;
---

<a
  is='app-link'
  class={twMerge(className)}
  {href}
  aria-label={Astro.slots.has('default') || icon ? label : undefined}
  aria-current={current}
  {...props}>
  <slot name='before' />
  <slot>
    {
      icon ? (
        <Icon
          {icon}
          class='disabled'
          size='1em'
        />
      ) : (
        <Fragment set:html={label} />
      )
    }
  </slot>
  <slot name='after' />
</a>

<script>
  import { page } from '../../app/stores';

  class AppLink extends HTMLAnchorElement {
    constructor() {
      super();
    }

    /*connectedCallback() {
      document.addEventListener('astro:page-load', this.check, { once: true });
      document.addEventListener('astro:after-swap', this.check, { once: true });
    }*/

    // disconnectedCallback() {  }

    set current(val: string | undefined) {
      val ? this.setAttribute('aria-current', val) : this.removeAttribute('aria-current');
    }

    check = () => {
      const pathname = page.get().url.pathname;
      this.current =
        pathname === this.pathname || pathname === `${this.pathname}/`
          ? 'page'
          : pathname?.indexOf(`${this.pathname}/`) >= 0
          ? 'step'
          : undefined;
    };
  }

  customElements.define('app-link', AppLink, { extends: 'a' });
</script>
