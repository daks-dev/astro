---
import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';

type Props = Omit<HTMLAttributes<'div'>, 'class'> & {
  class?: ClassName;
  delay?: number | string;
  duration?: number | string;
};
const { class: className, delay = 150, duration = 500, ...props } = Astro.props;
---

<div
  is='app-backstage'
  class={twMerge(
    'fixed left-0 top-0 z-50 flex h-screen w-screen items-center justify-center',
    'transition-opacity ease-out',
    className
  )}
  {...props}
  hidden
  aria-hidden='true'
  data-delay={delay}
  data-duration={duration}>
  <slot>
    <svg
      class='w-[35vmin] sm:w-[30vmin] md:w-[25vmin] lg:w-[20vmin] 2xl:w-[15vmin] 3xl:w-[10vmin]'
      viewBox='0 0 24 24'
      fill='currentColor'>
      {
        /*
      <rect
        width='6'
        height='14'
        x='1'
        y='4'>
        <animate
          id='svgSpinnersBarsFade0'
          fill='freeze'
          attributeName='opacity'
          begin='0;svgSpinnersBarsFade1.end-0.25s'
          dur='0.75s'
          values='1;.2'>
        </animate>
      </rect>
      <rect
        width='6'
        height='14'
        x='9'
        y='4'
        opacity='.4'>
        <animate
          fill='freeze'
          attributeName='opacity'
          begin='svgSpinnersBarsFade0.begin+0.15s'
          dur='0.75s'
          values='1;.2'>
        </animate>
      </rect>
      <rect
        width='6'
        height='14'
        x='17'
        y='4'
        opacity='.3'>
        <animate
          id='svgSpinnersBarsFade1'
          fill='freeze'
          attributeName='opacity'
          begin='svgSpinnersBarsFade0.begin+0.3s'
          dur='0.75s'
          values='1;.2'>
        </animate>
      </rect>
        */
      }
      <rect
        width='10'
        height='10'
        x='1'
        y='1'
        rx='1'>
        <animate
          id='_0'
          attributeName='x'
          fill='freeze'
          begin='0;_b.end'
          dur='0.2s'
          values='1;13'
        ></animate>
        <animate
          id='_1'
          attributeName='y'
          fill='freeze'
          begin='_8.end'
          dur='0.2s'
          values='1;13'
        ></animate>
        <animate
          id='_2'
          attributeName='x'
          fill='freeze'
          begin='_9.end'
          dur='0.2s'
          values='13;1'
        ></animate>
        <animate
          id='_3'
          attributeName='y'
          fill='freeze'
          begin='_a.end'
          dur='0.2s'
          values='13;1'
        ></animate>
      </rect>
      <rect
        width='10'
        height='10'
        x='1'
        y='13'
        rx='1'>
        <animate
          id='_4'
          attributeName='y'
          fill='freeze'
          begin='_0.end'
          dur='0.2s'
          values='13;1'
        ></animate>
        <animate
          id='_5'
          attributeName='x'
          fill='freeze'
          begin='_1.end'
          dur='0.2s'
          values='1;13'
        ></animate>
        <animate
          id='_6'
          attributeName='y'
          fill='freeze'
          begin='_2.end'
          dur='0.2s'
          values='1;13'
        ></animate>
        <animate
          id='_7'
          attributeName='x'
          fill='freeze'
          begin='_3.end'
          dur='0.2s'
          values='13;1'
        ></animate>
      </rect>
      <rect
        width='10'
        height='10'
        x='13'
        y='13'
        rx='1'>
        <animate
          id='_8'
          attributeName='x'
          fill='freeze'
          begin='_4.end'
          dur='0.2s'
          values='13;1'
        ></animate>
        <animate
          id='_9'
          attributeName='y'
          fill='freeze'
          begin='_5.end'
          dur='0.2s'
          values='13;1'
        ></animate>
        <animate
          id='_a'
          attributeName='x'
          fill='freeze'
          begin='_6.end'
          dur='0.2s'
          values='1;13'
        ></animate>
        <animate
          id='_b'
          attributeName='y'
          fill='freeze'
          begin='_7.end'
          dur='0.2s'
          values='1;13'
        ></animate>
      </rect>
    </svg>
  </slot>
</div>

<script>
  class AppBackstage extends HTMLDivElement {
    constructor() {
      super();
    }

    connectedCallback() {
      document.addEventListener('astro:page-load', this.remove, { once: true });
    }

    disconnectedCallback() {}

    get duration() {
      return this.dataset.duration ? Number(this.dataset.duration) : 5000;
    }

    get delay() {
      return this.dataset.delay ? Number(this.dataset.delay) : 75;
    }

    remove = () => {
      setTimeout(() => {
        this.style.transitionDuration = `${this.dataset.duration}ms`;
        this.style.pointerEvents = this.style.touchAction = 'none';
        this.style.opacity = '0';
        setTimeout(() => this.remove(), Number(this.dataset.duration));
      }, Number(this.dataset.delay));
    };
  }

  customElements.define('app-backstage', AppBackstage, { extends: 'div' });
</script>
