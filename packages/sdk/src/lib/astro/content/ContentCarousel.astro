---
import { getImage } from 'astro:assets';
import Carousel from '../../svelte/carousel/Carousel.svelte';
import type { ImageCollection } from '.';

type Props = {
  data: ImageCollection | ImageCollection[];
  transform: ImageTransform;
  filter?: string[];
  client?: 'load' | 'idle' | 'visible'; // | (string & NonNullable<unknown>)
} & Record<string, unknown>;

const { data: d, transform, filter, client = 'visible', ...props } = Astro.props;

const data: (ImageResult & {
  caption: Record<string, string>;
})[] = [];

const load = async (x: ImageCollection | ImageCollection[]) => {
  if (x instanceof Array) for (const y of x) await load(y);
  else
    for (const { image, caption: c } of x.data) {
      const r = await getImage({
        src: image,
        ...transform
      });
      const caption: Record<string, string> = {};
      Object.entries(c).forEach(([key, val]) => {
        if (filter === undefined || filter.includes(key)) caption[key] = val;
      });
      data.push({
        src: r.src,
        attributes: r.attributes,
        caption
      });
    }
};
await load(d);
---

{
  client === 'visible' ? (
    <Carousel
      {data}
      {...props}
      client:visible
    />
  ) : client === 'idle' ? (
    <Carousel
      {data}
      {...props}
      client:idle
    />
  ) : (
    <Carousel
      {data}
      {...props}
      client:load
    />
  )
}
