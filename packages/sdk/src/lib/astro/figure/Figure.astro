---
import type { HTMLAttributes } from 'astro/types';
import twMerge from '../../tailwind/tailwind-merge';

type Props = Omit<HTMLAttributes<'figure'>, 'class'> & {
  class?: ClassName;
  custom?: Record<string, ClassName>;
  image: ImageResult;
  attributes?: Metadata;
  alt: string;
  caption?: Record<string, string>;
};

const {
  class: className,
  custom = {},
  image,
  attributes,
  alt: __alt,
  caption = {},
  ...props
} = Astro.props;

const attrs = Object.assign(image.attributes, attributes);
attrs.itemprop ??= 'image';
attrs.loading ??= 'lazy';
attrs.decoding ??= 'async';

const alt = __alt ?? attrs.alt ?? (caption.title?.toLowerCase() || '');
delete attrs.alt;

const entries = Object.entries(caption);
---

<figure
  class={twMerge('flex flex-col', className)}
  {...props}>
  <slot name='before' />
  <img
    class={twMerge('bg-neutral-300', custom.image)}
    src={image.src}
    {...attrs}
    {alt}
  />
  <slot>
    {
      entries.length && (
        <figcaption class={twMerge('flex flex-col', custom?.caption)}>
          {entries.map(([key, val]) =>
            key === 'title' ? (
              <span class={twMerge('font-semibold', custom[key])}>{val}</span>
            ) : key === 'description' ? (
              <small class={twMerge(custom[key])}>{val}</small>
            ) : (
              <span class={twMerge(custom[key])}>{val}</span>
            )
          )}
        </figcaption>
      )
    }
  </slot>
  <slot name='after' />
</figure>
