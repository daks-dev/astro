---
import Link from '../navigate/Link.astro';
import twMerge from '../../tailwind/tailwind-merge';
import { uuid as __uuid } from '../../utils';
import type { NavItem } from '../navigate';

type Props = {
  //  tag?: 'div' | 'li';
  toggle?: NavItem;
  role?: astroHTML.JSX.AriaRole | null;
  class?: ClassName;
  custom?: Record<string, ClassName>;
  duration?: number;
};

const {
  //  tag = 'div',
  toggle = {},
  class: className,
  custom = {},
  role,
  duration = 300,
  ...props
} = Astro.props;

const { class: toogleClass, label, ...propsToggle } = toggle;

const uuid = __uuid();

// const Element = tag;
---

<div
  is='app-dropdown'
  {role}
  class={twMerge('relative flex flex-col align-middle', custom.item, className)}
  {...props}
  data-duration={duration}>
  {
    toggle.href ? (
      <Link
        id={`app-dropdown-toggle${uuid}`}
        class={twMerge('flex h-full items-center', custom.link, 'page:enabled', toogleClass)}
        {...propsToggle}
        aria-expanded='false'
        aria-controls={`app-dropdown-appear${uuid}`}>
        <slot name='label'>
          <Fragment set:html={label} />
        </slot>
      </Link>
    ) : (
      <button
        id={`app-dropdown-toggle${uuid}`}
        class={twMerge('flex h-full items-center', toogleClass)}
        {...propsToggle}
        aria-label={Astro.slots.has('label') ? label : undefined}
        aria-expanded='false'
        aria-controls={`app-dropdown-appear${uuid}`}>
        <slot name='label'>
          <Fragment set:html={label} />
        </slot>
      </button>
    )
  }
  <div
    id={`app-dropdown-appear${uuid}`}
    class={twMerge(
      'static lg:absolute lg:top-full',
      'flex flex-col w-max min-w-full overflow-hidden',
      'aria-hidden:disabled aria-hidden:opacity-0',
      'aria-hidden:my-0 aria-hidden:py-0 aria-hidden:text-[0] aria-hidden:leading-[0]',
      // '-lg:aria-hidden:max-h-0 -lg:aria-hidden:max-w-0 -lg:aria-hidden:my-0 -lg:aria-hidden:py-0',
      'origin-top-left lg:origin-top transition-all',
      custom.drop
    )}
    style={`transition-duration: ${duration}ms`}
    aria-owns={`app-dropdown-toggle${uuid}`}
    aria-hidden='true'>
    <slot />
  </div>
</div>

<script>
  import { navigate } from 'astro:transitions/client';
  import { beep } from '../../utils/audio';

  class AppDropdown extends HTMLDivElement {
    constructor() {
      super();
    }

    connectedCallback() {
      window.addEventListener('resize', this.bind);
      document.addEventListener('astro:page-load', this.bind, { once: true });
      document.addEventListener('click', this.handleOutside);
      this.toggle.addEventListener('click', this.handleToggle);
      this.toggle.addEventListener('dblclick', this.handleNavigate);
    }

    disconnectedCallback() {
      window.removeEventListener('resize', this.bind);
      document.removeEventListener('click', this.handleOutside);
    }

    toggle = this.children[0] as HTMLAnchorElement;

    appear = this.children[1] as HTMLDivElement;

    actives = this.appear.querySelectorAll('a, button, [role="button"]');

    get hidden() {
      return this.appear.getAttribute('aria-hidden') === 'true';
    }

    set hidden(val) {
      if (this.hidden !== val) {
        if (val) {
          this.toggle.setAttribute('aria-expanded', 'false');
          this.appear.setAttribute('aria-hidden', 'true');
          this.actives.forEach((el) => el.setAttribute('tabindex', '-1'));
        } else {
          this.toggle.setAttribute('aria-expanded', 'true');
          this.appear.removeAttribute('aria-hidden');
          this.actives.forEach((el) => el.removeAttribute('tabindex'));
        }
      }
    }

    bind = () => {
      this.hidden = true;
      if (window.innerWidth >= 1024)
        if (this.offsetLeft + this.clientWidth / 2 < window.innerWidth / 2) {
          this.appear.style.left = '0';
          this.appear.style.right = '';
        } else {
          this.appear.style.left = '';
          this.appear.style.right = '0';
        }
    };

    handleToggle = (ev: Event) => {
      ev.preventDefault();
      this.hidden = !this.hidden;
    };

    handleNavigate = (ev: Event) => {
      ev.preventDefault();
      if (this.toggle.pathname)
        if (this.toggle.getAttribute('aria-current') === 'page') beep(250, 150, 75);
        else navigate(this.toggle.pathname);
    };

    handleOutside = (ev: Event) => {
      if (
        ev?.target &&
        // ev.defaultPrevented &&
        !this.contains(ev.target as Node)
      )
        this.hidden = true;
    };
  }

  customElements.define('app-dropdown', AppDropdown, { extends: 'div' });
</script>
